def builds = []
def desiredVersion
pipeline {
    environment {
        isRollbackSuccess = 'Success'
    }
    agent any
    tools {
      maven 'maven'
      jdk 'jdk1.8.0'
    }
    stages {
        stage('FindSuccessfullBuilds') {
            steps {
                script  {
                  def job = jenkins.model.Jenkins.instance.getItem("devops-app")
                  job.builds.each {
                      def build = it
                      if (it.getResult().toString().equals("SUCCESS")) {
                          it.badgeActions.each {
                                   builds.add(build.displayName[1..-1])
                           }
                      }
                  }
                  builds.unique()
                }
            }
        }
        stage('RollbackSQLForSuccessfulBuilds') {
            steps   {
                script  {
                    desiredVersion = "${ROLLBACK_VERSION}"
                    
                    for (build in builds)    {
                        if (build != desiredVersion)   {
                            println "Rolling back build " + build
                            file_name = 'devops-database-0.0.1.' + build + '.tar.gz'
                            file_url = '"http://34.222.234.203:8081/artifactory/libs-snapshot/xyz/aingaran/dataops/' + file_name + '"'
                            sh 'rm ' + file_name + ' ||:'
                            sh 'curl -uadmin:AP3k8uCck9Xxw1GG3i3yz2rq4Kz ' + file_url + ' -o ' + file_name
                            sh 'tar -xvzf ' + file_name
                            if (isRollbackSuccess.equals('connection failed'))  {
                                break
                            } else if (isRollbackSuccess.equals('Failed')) {
                                sh 'python3 database/tools/rollback_sql.py 34.210.53.126 9000 prod password proddatabase build/rollback.sql'
                            } else  {
                                isRollbackSuccess = sh(script: 'python3 database/tools/rollback_sql.py 34.222.234.203 9000 prod password proddatabase build/rollback.sql', returnStdout: true)
                            }
                            sh 'rm ' + file_name
                            sh 'rm -rf build/'
                            sh 'ls'
                            println "isRollbackSuccess value is " + isRollbackSuccess
                        } else  {
                            println "All scripts rolled back"
                            break
                        }
                    }
                }
            }
        }
		stage('RollbackApplication')	{
			when {
                expression { isRollbackSuccess != 'connection failed'}
            }
			steps	{
				
			}
		}
		stage('CreateApplicationYAML')	{
			when {
                expression { isRollbackSuccess != 'connection failed'}
            }
			steps{
				sh 'echo "kind: Service
apiVersion: v1
metadata:
  name: devops-app
  namespace: euc-ns
spec:
  selector:
    app: devops-app
  ports:
  - protocol: TCP
    port: 8080
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: devops-app
  namespace: euc-ns
spec:
  selector:
      matchLabels:
        app: devops-app
  replicas: 2
  template:
    metadata:
      labels:
        app: devops-app
    spec:
      containers:
        - name: devops-app
          image: devops/devops-app:${ROLLBACK_VERSION}
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
" > Appliacation.yaml'
			}
		}
		stage('RollbackApplication') {
			when {
                expression { isRollbackSuccess != 'connection failed'}
            }
			steps{
				sh 'docker login -u admin -p password 34.222.234.203:8081'
				sh 'docker pull 34.222.234.203:8081/devops/devops-app:${ROLLBACK_VERSION}'
				kubernetesDeploy(
					kubeconfigId: 'kubeconfig',
					configs: 'Application.yml',
					enableConfigSubstitution: false
				)
			}
		}
        stage('PrintLog')   {
            steps   {
                sh 'cat execution.log ||:'
            }
        }
        stage('RollbackFailureLogger') {
            when {
                expression { isRollbackSuccess == 'Failed' || isRollbackSuccess == 'connection failed'}
            }
            steps {
                script  {
                    if(isRollbackSuccess.equals('connection failed'))   {
                        println "A critical error occured. Check log.."
                        sh 'exit 1'
                    } else if(isRollbackSuccess.equals("Failed"))    {
                        println "There were few problems while rollback, but that shouldn't cause any issues..."
                        sh 'exit 0'
                    }
                }
            }
        }
    }
}
