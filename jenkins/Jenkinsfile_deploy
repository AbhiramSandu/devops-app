pipeline {
    environment {
        isDeploymentSuccess = ''
    }
    agent any
    tools {
      maven 'maven'
      jdk 'jdk1.8.0'
    }
    stages {
        stage('DatabaseDryRun') {
            steps {
                echo 'Testing the scrips on a temporary database...'
                sh 'mvn -f database/pom.xml liquibase:dropAll -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.222.234.203:9000/testdatabase -Ddb.username=test -Ddb.password=password'
                sh 'mvn -f database/pom.xml liquibase:update -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.222.234.203:9000/testdatabase -Ddb.username=test -Ddb.password=password'
                sh 'mvn -f database/pom.xml liquibase:rollback -Dliquibase.rollbackCount=10000000 -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.222.234.203:9000/testdatabase -Ddb.username=test -Ddb.password=password'
                sh 'mvn -f database/pom.xml liquibase:update -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.222.234.203:9000/testdatabase -Ddb.username=test -Ddb.password=password'
            }
        }
        stage('CreateSQL') {
            steps {
                echo 'Creating update SQL from scripts..'
                sh 'mvn -f database/pom.xml clean liquibase:updateSQL -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.222.234.203:9000/proddatabase -Ddb.username=prod -Ddb.password=password'
                sh 'mkdir build && cp database/target/liquibase/migrate.sql build/update.sql'
            }
        }
        stage('RollbackSQL') {
            steps {
                echo 'Creating rollback SQL from scripts..'
                sh 'mvn -f database/pom.xml clean liquibase:futureRollbackSQL -Ddb.driver=com.mysql.cj.jdbc.Driver -Ddb.url=jdbc:mysql://34.222.234.203:9000/proddatabase -Ddb.username=prod -Ddb.password=password'
                sh 'cp database/target/liquibase/migrate.sql build/rollback.sql'
            }
        }
        stage('ArchiveCreation') {
            steps {
                echo 'Creating a tar.gz....'
                sh 'tar -czvf devops-database-0.0.1.${BUILD_ID}.tar.gz build/'
            }
        }
        stage('SQLArchiveUpload') {
            steps {
                echo 'Deploying tar file to artifactory....'
                sh 'curl -uadmin:AP3k8uCck9Xxw1GG3i3yz2rq4Kz -T devops-database-0.0.1.${BUILD_ID}.tar.gz "http://34.222.234.203:8081/artifactory/libs-release/xyz/aingaran/dataops/devops-database-0.0.1.${BUILD_ID}.tar.gz"'
            }
        }
        stage('DeploySQL') {
            steps {
                echo 'Deploying....'
                sh 'bash ./database/tools/setup.sh'
                script {
                  isDeploymentSuccess = sh(script: 'python3 database/tools/execute_sql.py 34.222.234.203 9000 prod password proddatabase build/update.sql', returnStdout: true)
                }
                echo 'deployment success? ' 
                echo isDeploymentSuccess
            }
        }
        stage('DeployRollbackSQL') {
            when {
                expression { isDeploymentSuccess == 'Failed' }
            }
            steps{
                echo 'Deploying Rollback....'
                script {
                    try {
                        sh 'python3 database/tools/rollback_sql.py 34.222.234.203 9000 prod password proddatabase build/rollback.sql'
                    } catch(Exception e)    {
                        echo 'rollback completed...'
                    }
                }
            }
        }
        stage('TestDatabase') {
            steps {
                echo 'Coming Soon....'
            }
        }
		stage('ApplicationUnitTest') {
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps {
				sh 'mvn -f application/pom.xml test'
			}
		}
		stage('ApplicationBuild') {
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps {
				sh 'mvn -f application/pom.xml -B -DskipTests clean package'
			}
		}
		stage('StaticCode Analysis') {
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps {
				sh 'mvn -f application/pom.xml sonar:sonar \
  -Dsonar.projectKey=devops-app \
  -Dsonar.host.url=http://52.36.87.187:9000 \
  -Dsonar.login=5a2074ef3103ded03375cbea26928d5c27e724cc'
			}
		}
		stage('Building image') {
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps {
				sh 'docker build --tag=devops/devops-app:${BUILD_ID} docker/Dockerfile'
			}
		}
		stage('Image upload') {
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps {
				echo 'disabled'
				//sh 'docker login -u admin -p password 34.222.234.203:8081'
				//sh 'docker push 34.222.234.203:8081/devops/devops-app:${BUILD_ID}'
			}
		}
		stage('CreateApplicationYAML')	{
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps{
				script	{
					sh '''echo "kind: Service
apiVersion: v1
metadata:
  name: devops-app
  namespace: euc-ns
spec:
  selector:
    app: devops-app
  ports:
  - protocol: TCP
    port: 8080
  type: NodePort
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: devops-app
  namespace: euc-ns
spec:
  selector:
      matchLabels:
        app: devops-app
  replicas: 2
  template:
    metadata:
      labels:
        app: devops-app
    spec:
      containers:
        - name: devops-app
          image: devops/devops-app:${BUILD_ID}
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
" > Appliacation.yaml'''
				}
			}
		}
		stage('Deploy the application') {
			when {
                expression { isDeploymentSuccess == 'Success' }
            }
			steps{
				//Deploying the docker image as the service using kubernets cd plug in
				//mehtod to deploy the ymal file
				kubernetesDeploy(
					kubeconfigId: 'kubeconfig',
					configs: 'Application.yml',
					enableConfigSubstitution: false
				)
			}
		}
        stage('PrintLog')   {
            steps   {
                sh 'cat execution.log ||:'
            }
        }
        stage('DeploymentFailureLogger') {
            when {
                expression { isDeploymentSuccess == 'Failed' }
            }
            steps {
                echo 'SQL Failed to Deploy. SQL rolled back and application not deployed... '
                sh 'exit 1'
            }
        }
    }
}
